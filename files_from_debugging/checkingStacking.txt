Loading data
Collecting variables in 201409170154260000
Collecting variables in 201409171900070000
Collecting variables in 201409171902140000
Collecting variables in 201409171902170000
Collecting variables in 201409171904110000
Collecting variables in 201409171904310000
Collecting variables in 201409171904420000
Collecting variables in 201409171904440000
Collecting variables in 201409171904580000
Collecting variables in 201409171905190000
Collecting variables in 201409171905230000
Collecting variables in 201409171905480000
Collecting variables in 201409171907560000
Collecting variables in 201409171908400000
Collecting variables in 201409171910280000
Collecting variables in 201409171910380000
Collecting variables in 201409171911280000
Collecting variables in 201409171911310000
Collecting variables in 201409171911530000
Collecting variables in 201409171912030000
Collecting variables in 201409171912480000
Collecting variables in 201409171913490000
Collecting variables in 201409171914330000
Collecting variables in 201409171925160000
Collecting variables in 201409171932560000
Collecting variables in 201409171938260000
Collecting variables in 201409171938580000
Collecting variables in 201409171945140000
Collecting variables in 201409172003520000
Collecting variables in 201409172009070000
Collecting variables in 201409172016270000
Collecting variables in 201409172019510000
Collecting variables in 201409172025300000
Collecting variables in 201409172031390000
Collecting variables in 201409172033470000
Collecting variables in 201409172035340000
Collecting variables in 201409172043050000
Collecting variables in 201409172049230000
Collecting variables in 201409172138080000
Collecting variables in 201409172138350000
Collecting variables in 201409172142170000
Collecting variables in 201409172145260000
Collecting variables in 201409172145430000
Collecting variables in 201409172147020000
Collecting variables in 201409172147420000
Collecting variables in 201409172148220000
Collecting variables in 201409172216240000
Collecting variables in 201409172222330000
Collecting variables in 201409172228080000
Collecting variables in 201409172230410000
Computing lines for 201409170154260000
length of lines  5
Computing lines for 201409171900070000
length of lines  9
Computing lines for 201409171902140000
length of lines  10
Computing lines for 201409171902170000
length of lines  11
Computing lines for 201409171904110000
length of lines  13
Computing lines for 201409171904310000
length of lines  15
Computing lines for 201409171904420000
length of lines  16
Computing lines for 201409171904440000
length of lines  16
Computing lines for 201409171904580000
length of lines  19
Computing lines for 201409171905190000
length of lines  23
Computing lines for 201409171905230000
length of lines  23
Computing lines for 201409171905480000
length of lines  24
Computing lines for 201409171907560000
length of lines  24
Computing lines for 201409171908400000
length of lines  27
Computing lines for 201409171910280000
length of lines  27
Computing lines for 201409171910380000
length of lines  34
Computing lines for 201409171911280000
length of lines  35
Computing lines for 201409171911310000
length of lines  38
Computing lines for 201409171911530000
length of lines  38
Computing lines for 201409171912030000
length of lines  40
Computing lines for 201409171912480000
length of lines  41
Computing lines for 201409171913490000
length of lines  41
Computing lines for 201409171914330000
length of lines  42
Computing lines for 201409171925160000
length of lines  42
Computing lines for 201409171932560000
length of lines  43
Computing lines for 201409171938260000
length of lines  43
Computing lines for 201409171938580000
length of lines  43
Computing lines for 201409171945140000
length of lines  45
Computing lines for 201409172003520000
length of lines  45
Computing lines for 201409172009070000
length of lines  45
Computing lines for 201409172016270000
length of lines  45
Computing lines for 201409172019510000
length of lines  45
Computing lines for 201409172025300000
length of lines  45
Computing lines for 201409172031390000
length of lines  46
Computing lines for 201409172033470000
length of lines  46
Computing lines for 201409172035340000
length of lines  47
Computing lines for 201409172043050000
length of lines  48
Computing lines for 201409172049230000
length of lines  48
Computing lines for 201409172138080000
length of lines  48
Computing lines for 201409172138350000
length of lines  48
Computing lines for 201409172142170000
length of lines  48
Computing lines for 201409172145260000
length of lines  48
Computing lines for 201409172145430000
length of lines  48
Computing lines for 201409172147020000
length of lines  49
Computing lines for 201409172147420000
length of lines  49
Computing lines for 201409172148220000
length of lines  49
Computing lines for 201409172216240000
length of lines  49
Computing lines for 201409172222330000
length of lines  49
Computing lines for 201409172228080000
length of lines  49
Computing lines for 201409172230410000
length of lines  50
{'abstract_variables': (AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(listB [[2, 2, 2]])),
 'line_values': [('myNaN', [1, 1, 1]), ('myNaN', [2, 2, 2])],
 'template': 'def dotProduct(___,___):'}
{'abstract_variables': (AbstractVariable(total [0, 2, 4, 6]),),
 'line_values': [('myNaN',)],
 'template': '___=0'}
{'abstract_variables': (AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(listA [[1, 1, 1]])),
 'line_values': [('myNaN', 0, 1, 2),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1])],
 'template': 'for ___ in range(len(___)):'}
{'abstract_variables': (AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(listB [[2, 2, 2]]),
                        AbstractVariable(i [0, 1, 2])),
 'line_values': [(0, 2, 4),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1]),
                 (0, 1, 2),
                 ([2, 2, 2], [2, 2, 2], [2, 2, 2]),
                 (0, 1, 2)],
 'template': '___+=___[___]*___[___]'}
{'abstract_variables': (AbstractVariable(total [0, 2, 4, 6]),),
 'line_values': [(6, 6)],
 'template': 'return ___'}
{'abstract_variables': (AbstractVariable(length [3]),
                        AbstractVariable(listA [[1, 1, 1]])),
 'line_values': [('myNaN',), ([1, 1, 1],)],
 'template': '___=len(___)'}
{'abstract_variables': (AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(length [3])),
 'line_values': [('myNaN', 0, 1, 2), (3, 3, 3, 3)],
 'template': 'for ___ in range(0,___):'}
{'abstract_variables': (AbstractVariable(b [2]),
                        AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(listB [[2, 2, 2]]),
                        AbstractVariable(i [0, 1, 2])),
 'line_values': [('myNaN', 2, 2),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1]),
                 (0, 1, 2),
                 ([2, 2, 2], [2, 2, 2], [2, 2, 2]),
                 (0, 1, 2)],
 'template': '___=___[___]*___[___]'}
{'abstract_variables': (AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(b [2])),
 'line_values': [(0, 2, 4), (2, 2, 2)],
 'template': '___+=___'}
{'abstract_variables': (AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(b [2])),
 'line_values': [(0, 2, 4), (0, 2, 4), (2, 2, 2)],
 'template': '___=___+___'}
{'abstract_variables': (AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(listA [[1, 1, 1]])),
 'line_values': [('myNaN', 0, 1, 2),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1])],
 'template': 'for ___ in range(0,len(___)):'}
{'abstract_variables': (AbstractVariable(ans [6]),
                        AbstractVariable(a [1]),
                        AbstractVariable(b [2]),
                        AbstractVariable(a [1]),
                        AbstractVariable(b [2]),
                        AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(listB [[2, 2, 2]])),
 'line_values': [('myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN'),
                 ('myNaN', 'myNaN', 'myNaN', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                 ('myNaN', 'myNaN', 'myNaN', 2, 2, 2, 2, 2, 2, 2, 2, 2, 2),
                 ('myNaN', 'myNaN', 'myNaN', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                 ('myNaN', 'myNaN', 'myNaN', 2, 2, 2, 2, 2, 2, 2, 2, 2, 2),
                 ([1, 1, 1],
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN'),
                 ([2, 2, 2],
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN')],
 'template': '___=sum(___*___ for(___,___)in zip(___,___))'}
{'abstract_variables': (AbstractVariable(ans [6]),),
 'line_values': [(6, 6)],
 'template': 'return ___'}
{'abstract_variables': (AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(listA [[1, 1, 1]])),
 'line_values': [('myNaN', 0, 1, 2),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1])],
 'template': 'for ___ in xrange(0,len(___)):'}
{'abstract_variables': (AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(listB [[2, 2, 2]]),
                        AbstractVariable(i [0, 1, 2])),
 'line_values': [(0, 2, 4),
                 (0, 2, 4),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1]),
                 (0, 1, 2),
                 ([2, 2, 2], [2, 2, 2], [2, 2, 2]),
                 (0, 1, 2)],
 'template': '___=___+___[___]*___[___]'}
{'abstract_variables': (AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(listA [[1, 1, 1]])),
 'line_values': [('myNaN', 0, 1, 2),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1])],
 'template': 'for ___ in xrange(len(___)):'}
{'abstract_variables': (AbstractVariable(a [1]),
                        AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(i [0, 1, 2])),
 'line_values': [('myNaN', 1, 1),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1]),
                 (0, 1, 2)],
 'template': '___=___[___]'}
{'abstract_variables': (AbstractVariable(b [2]),
                        AbstractVariable(listB [[2, 2, 2]]),
                        AbstractVariable(i [0, 1, 2])),
 'line_values': [('myNaN', 2, 2),
                 ([2, 2, 2], [2, 2, 2], [2, 2, 2]),
                 (0, 1, 2)],
 'template': '___=___[___]'}
{'abstract_variables': (AbstractVariable(b [2]),
                        AbstractVariable(a [1]),
                        AbstractVariable(b [2])),
 'line_values': [('myNaN', 2, 2), (1, 1, 1), (2, 2, 2)],
 'template': '___=___*___'}
{'abstract_variables': (AbstractVariable(a___2 [0, 1, 2, 3]),),
 'line_values': [('myNaN',)],
 'template': '___=0'}
{'abstract_variables': (AbstractVariable(a___2 [0, 1, 2, 3]),
                        AbstractVariable(length [3])),
 'line_values': [(0, 1, 2, 3), (3, 3, 3, 3)],
 'template': 'while ___<___:'}
{'abstract_variables': (AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(a___2 [0, 1, 2, 3]),
                        AbstractVariable(listB [[2, 2, 2]]),
                        AbstractVariable(a___2 [0, 1, 2, 3])),
 'line_values': [(0, 2, 4),
                 (0, 2, 4),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1]),
                 (0, 1, 2),
                 ([2, 2, 2], [2, 2, 2], [2, 2, 2]),
                 (0, 1, 2)],
 'template': '___=___+___[___]*___[___]'}
{'abstract_variables': (AbstractVariable(a___2 [0, 1, 2, 3]),),
 'line_values': [(0, 1, 2)],
 'template': '___+=1'}
{'abstract_variables': (AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(b [2]),
                        AbstractVariable(total [0, 2, 4, 6])),
 'line_values': [(0, 2, 4), (2, 2, 2), (0, 2, 4)],
 'template': '___=___+___'}
{'abstract_variables': (AbstractVariable(n [3, 0, 1, 2]),
                        AbstractVariable(listA [[1, 1, 1]])),
 'line_values': [('myNaN',), ([1, 1, 1],)],
 'template': '___=len(___)'}
{'abstract_variables': (AbstractVariable(n [3, 0, 1, 2]),
                        AbstractVariable(n [3, 0, 1, 2])),
 'line_values': [(3, 0, 1, 2), (3, 0, 1, 2)],
 'template': 'for ___ in range(0,___):'}
{'abstract_variables': (AbstractVariable(a___2 [0, 1, 2, 3]),
                        AbstractVariable(a___2 [0, 1, 2, 3])),
 'line_values': [(0, 1, 2), (0, 1, 2)],
 'template': '___=___+1'}
{'abstract_variables': (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]),
                        AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []])),
 'line_values': [('myNaN', [1, 1, 1]), ('myNaN', [2, 2, 2])],
 'template': 'def dotProduct(___,___):'}
{'abstract_variables': (AbstractVariable(length [3]),
                        AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []])),
 'line_values': [('myNaN',), ([1, 1, 1],)],
 'template': '___=len(___)'}
{'abstract_variables': (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),),
 'line_values': [('myNaN',)],
 'template': '___=[]'}
{'abstract_variables': (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]),
                        AbstractVariable(length [3])),
 'line_values': [('myNaN', 0, 1, 2), (3, 3, 3, 3)],
 'template': 'for ___ in range(0,___):'}
{'abstract_variables': (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),
                        AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]),
                        AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []])),
 'line_values': [([], [2], [2, 2]),
                 ([1, 1, 1], [1, 1], [1]),
                 ([2, 2, 2], [2, 2], [2])],
 'template': '___.append(___.pop()*___.pop())'}
{'abstract_variables': (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]),
                        AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])),
 'line_values': [(2, 0, 1, 2), ([2, 2, 2], [2, 2], [2], [])],
 'template': 'for ___ in range(0,len(___)):'}
{'abstract_variables': (AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])),
 'line_values': [(0, 2, 4), ([2, 2, 2], [2, 2], [2])],
 'template': '___+=___.pop()'}
{'abstract_variables': (AbstractVariable(ans [6]),
                        AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(listB [[2, 2, 2]]),
                        AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(listA [[1, 1, 1]])),
 'line_values': [('myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN'),
                 ([1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1]),
                 ('myNaN', 'myNaN', 'myNaN', 0, 0, 0, 1, 1, 1, 2, 2, 2, 2),
                 ([2, 2, 2],
                  [2, 2, 2],
                  [2, 2, 2],
                  [2, 2, 2],
                  [2, 2, 2],
                  [2, 2, 2],
                  [2, 2, 2],
                  [2, 2, 2],
                  [2, 2, 2],
                  [2, 2, 2],
                  [2, 2, 2],
                  [2, 2, 2],
                  [2, 2, 2]),
                 ('myNaN', 'myNaN', 'myNaN', 0, 0, 0, 1, 1, 1, 2, 2, 2, 2),
                 ('myNaN', 'myNaN', 'myNaN', 0, 0, 0, 1, 1, 1, 2, 2, 2, 2),
                 ([1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1],
                  [1, 1, 1])],
 'template': '___=sum(___[___]*___[___]for ___ in range(len(___)))'}
{'abstract_variables': (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),),
 'line_values': [('myNaN',)],
 'template': '___=[]'}
{'abstract_variables': (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),
                        AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(listB [[2, 2, 2]]),
                        AbstractVariable(i [0, 1, 2])),
 'line_values': [([], [2], [2, 2]),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1]),
                 (0, 1, 2),
                 ([2, 2, 2], [2, 2, 2], [2, 2, 2]),
                 (0, 1, 2)],
 'template': '___.append(___[___]*___[___])'}
{'abstract_variables': (AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),
                        AbstractVariable(i [0, 1, 2])),
 'line_values': [(0, 2, 4), ([2], [2, 2], [2, 2, 2]), (0, 1, 2)],
 'template': '___+=___[___]'}
{'abstract_variables': (AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(listB [[2, 2, 2]])),
 'line_values': [([1, 1, 1],), ([2, 2, 2],)],
 'template': 'assert len(___)==len(___)'}
{'abstract_variables': (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),),
 'line_values': [([2, 2, 2], [2, 2, 2])],
 'template': 'return sum(___)'}
{'abstract_variables': (AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(b [2]),
                        AbstractVariable(total [0, 2, 4, 6])),
 'line_values': [(0, 2, 4), (2, 2, 2), (0, 2, 4)],
 'template': '___=int(___)+___'}
{'abstract_variables': (AbstractVariable(a [1]),
                        AbstractVariable(b [2]),
                        AbstractVariable(a [1]),
                        AbstractVariable(b [2]),
                        AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(listB [[2, 2, 2]])),
 'line_values': [('myNaN',
                  'myNaN',
                  'myNaN',
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  'myNaN'),
                 ('myNaN',
                  'myNaN',
                  'myNaN',
                  2,
                  2,
                  2,
                  2,
                  2,
                  2,
                  2,
                  2,
                  2,
                  2,
                  'myNaN'),
                 ('myNaN',
                  'myNaN',
                  'myNaN',
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  'myNaN'),
                 ('myNaN',
                  'myNaN',
                  'myNaN',
                  2,
                  2,
                  2,
                  2,
                  2,
                  2,
                  2,
                  2,
                  2,
                  2,
                  'myNaN'),
                 ([1, 1, 1],
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  [1, 1, 1]),
                 ([2, 2, 2],
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  'myNaN',
                  [2, 2, 2])],
 'template': 'return sum(___*___ for(___,___)in zip(___,___))'}
{'abstract_variables': (AbstractVariable(index [0]),),
 'line_values': [('myNaN',)],
 'template': '___=0'}
{'abstract_variables': (AbstractVariable(a___2 [0, 1, 2, 3]),
                        AbstractVariable(listA [[1, 1, 1]])),
 'line_values': [(0, 1, 2, 3), ([1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1])],
 'template': 'while ___<len(___):'}
{'abstract_variables': (AbstractVariable(b [2]),
                        AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(a___2 [0, 1, 2, 3]),
                        AbstractVariable(listB [[2, 2, 2]]),
                        AbstractVariable(a___2 [0, 1, 2, 3])),
 'line_values': [('myNaN', 2, 2),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1]),
                 (0, 1, 2),
                 ([2, 2, 2], [2, 2, 2], [2, 2, 2]),
                 (0, 1, 2)],
 'template': '___=___[___]*___[___]'}
{'abstract_variables': (AbstractVariable(a [1]),
                        AbstractVariable(b [2]),
                        AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(listB [[2, 2, 2]])),
 'line_values': [('myNaN', 1, 1, 1),
                 ('myNaN', 2, 2, 2),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]),
                 ([2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2])],
 'template': 'for(___,___)in zip(___,___):'}
{'abstract_variables': (AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(listB [[2, 2, 2]]),
                        AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(total [0, 2, 4, 6])),
 'line_values': [(0, 2, 4),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1]),
                 (0, 1, 2),
                 ([2, 2, 2], [2, 2, 2], [2, 2, 2]),
                 (0, 1, 2),
                 (0, 2, 4)],
 'template': '___=___[___]*___[___]+___'}
{'abstract_variables': (AbstractVariable(total [0, 2, 4, 6]),
                        AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(a___2 [0, 1, 2, 3]),
                        AbstractVariable(listB [[2, 2, 2]]),
                        AbstractVariable(a___2 [0, 1, 2, 3])),
 'line_values': [(0, 2, 4),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1]),
                 (0, 1, 2),
                 ([2, 2, 2], [2, 2, 2], [2, 2, 2]),
                 (0, 1, 2)],
 'template': '___+=___[___]*___[___]'}
{'abstract_variables': (AbstractVariable(listA [[1, 1, 1]]),
                        AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(listB [[2, 2, 2]]),
                        AbstractVariable(i [0, 1, 2])),
 'line_values': [([1, 1, 1], [1, 1, 1], [1, 1, 1]),
                 (0, 1, 2),
                 ([2, 2, 2], [2, 2, 2], [2, 2, 2]),
                 (0, 1, 2)],
 'template': '___[___]*___[___]'}
{'abstract_variables': (AbstractVariable(i [0, 1, 2]),
                        AbstractVariable(listA [[1, 1, 1]])),
 'line_values': [('myNaN', 0, 1, 2),
                 ([1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1])],
 'template': 'for ___ in range(0,len(___),1):'}
Rewriting 201409170154260000
Rewriting 201409171900070000
Rewriting 201409171902140000
Rewriting 201409171902170000
Rewriting 201409171904110000
Rewriting 201409171904310000
Rewriting 201409171904420000
Rewriting 201409171904440000
Fixing clash in 201409171904580000
Rewriting 201409171904580000
Rewriting 201409171905190000
Rewriting 201409171905230000
Rewriting 201409171905480000
Rewriting 201409171907560000
Rewriting 201409171908400000
Rewriting 201409171910280000
Rewriting 201409171910380000
Rewriting 201409171911280000
Rewriting 201409171911310000
Rewriting 201409171911530000
Rewriting 201409171912030000
Rewriting 201409171912480000
Rewriting 201409171913490000
Rewriting 201409171914330000
Rewriting 201409171925160000
Rewriting 201409171932560000
Rewriting 201409171938260000
Rewriting 201409171938580000
Rewriting 201409171945140000
Rewriting 201409172003520000
Rewriting 201409172009070000
Rewriting 201409172016270000
Rewriting 201409172019510000
Rewriting 201409172025300000
Fixing clash in 201409172031390000
Rewriting 201409172031390000
Fixing clash in 201409172033470000
Rewriting 201409172033470000
Rewriting 201409172035340000
Rewriting 201409172043050000
Fixing clash in 201409172049230000
Rewriting 201409172049230000
Rewriting 201409172138080000
Rewriting 201409172138350000
Rewriting 201409172142170000
Rewriting 201409172145260000
Rewriting 201409172145430000
Rewriting 201409172147020000
Rewriting 201409172147420000
Rewriting 201409172148220000
Rewriting 201409172216240000
Rewriting 201409172222330000
Rewriting 201409172228080000
Rewriting 201409172230410000
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? True set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___=sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,___):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___[___]', (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___[___]', (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___=len(___)', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(0,___):', (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in range(0,___):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3]))), ('___+=___.pop()', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]))), ('def dotProduct(___,___):', (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___.append(___.pop()*___.pop())', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]))), ('___=[]', (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(ans [6]),)), ('___=sum(___[___]*___[___]for ___ in range(len(___)))', (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('___+=___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('assert len(___)==len(___)', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=int(___)+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6]))), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return sum(___*___ for(___,___)in zip(___,___))', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('for ___ in range(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(index [0]),)), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___.append(___[___]*___[___])', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=[]', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),)), ('return sum(___)', (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for(___,___)in zip(___,___):', (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___*___', (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]+___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=len(___)', (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]]))), ('while ___<___:', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=1', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('for ___ in range(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('___=0', (AbstractVariable(a___2 [0, 1, 2, 3]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),)), ('___=___+1', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('while ___<len(___):', (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___+___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___[___]*___[___]', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
checking whether a particular solution belongs in this stack.
lines_match? False set([('for ___ in xrange(0,len(___)):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=___[___]*___[___]', (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('___+=___', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))]) set([('def dotProduct(___,___):', (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]]))), ('___+=___[___]*___[___]', (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]))), ('for ___ in range(0,len(___),1):', (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]]))), ('___=0', (AbstractVariable(total [0, 2, 4, 6]),)), ('return ___', (AbstractVariable(total [0, 2, 4, 6]),))])
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('tot',), 4), (for ___ in range(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___+=___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('tot', 'listA', 'i', 'listB', 'i'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('tot',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('answer',), 4), (___=len(___) ||| (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]])), ('length_of_list', 'listA'), 4), (for ___ in range(0,___): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])), ('i', 'length_of_list'), 4), (___=___[___]*___[___] ||| (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('dot_product', 'listA', 'i', 'listB', 'i'), 8), (___+=___ ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2])), ('answer', 'dot_product'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('answer',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4), (for ___ in range(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___=___[___]*___[___] ||| (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('product', 'listA', 'i', 'listB', 'i'), 8), (___=___+___ ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2])), ('total', 'total', 'product'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('endlist',), 4), (for ___ in range(0,len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___=___[___]*___[___] ||| (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('multispots', 'listA', 'i', 'listB', 'i'), 8), (___+=___ ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2])), ('endlist', 'multispots'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('endlist',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=sum(___*___ for(___,___)in zip(___,___)) ||| (AbstractVariable(ans [6]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('dotProduct', 'a', 'b', 'a', 'b', 'listA', 'listB'), 4), (return ___ ||| (AbstractVariable(ans [6]),), ('dotProduct',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('dot',), 4), (for ___ in xrange(0,len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___=___+___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('dot', 'dot', 'listA', 'i', 'listB', 'i'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('dot',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('ans',), 4), (for ___ in xrange(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___=___+___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('ans', 'ans', 'listA', 'i', 'listB', 'i'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('ans',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=len(___) ||| (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]])), ('length', 'listA'), 4), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('c',), 4), (for ___ in range(0,___): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(length [3])), ('x', 'length'), 4), (___+=___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('c', 'listA', 'x', 'listB', 'x'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('c',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4), (for ___ in range(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___=___[___] ||| (AbstractVariable(a [1]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2])), ('term_listA', 'listA', 'i'), 8), (___=___[___] ||| (AbstractVariable(b [2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('term_listB', 'listB', 'i'), 8), (___=___*___ ||| (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])), ('product', 'term_listA', 'term_listB'), 8), (___+=___ ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2])), ('total', 'product'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=len(___) ||| (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]])), ('n', 'listA'), 4), (___=0 ||| (AbstractVariable(a___2 [0, 1, 2, 3]),), ('m',), 4), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('answer',), 4), (while ___<___: ||| (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3])), ('m', 'n'), 4), (___=___+___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3])), ('answer', 'answer', 'listA', 'm', 'listB', 'm'), 8), (___+=1 ||| (AbstractVariable(a___2 [0, 1, 2, 3]),), ('m',), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('answer',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4), (for ___ in range(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___=___[___]*___[___] ||| (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('c', 'listA', 'i', 'listB', 'i'), 8), (___=___+___ ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6])), ('total', 'c', 'total'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('dot_product',), 4), (___=0 ||| (AbstractVariable(a___2 [0, 1, 2, 3]),), ('a',), 4), (___=len(___) ||| (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('n', 'listA'), 4), (for ___ in range(0,___): ||| (AbstractVariable(n [3, 0, 1, 2]), AbstractVariable(n [3, 0, 1, 2])), ('n', 'n'), 4), (___=___+___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3])), ('dot_product', 'dot_product', 'listA', 'a', 'listB', 'a'), 8), (___=___+1 ||| (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3])), ('a', 'a'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('dot_product',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []])), ('listA', 'listB'), 0), (___=len(___) ||| (AbstractVariable(length [3]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []])), ('length', 'listA'), 4), (___=[] ||| (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]),), ('listc',), 4), (for ___ in range(0,___): ||| (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(length [3])), ('i', 'length'), 4), (___.append(___.pop()*___.pop()) ||| (AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []]), AbstractVariable(listA__ [[1, 1, 1], [1, 1], [1], []]), AbstractVariable(listB__ [[2, 2, 2], [2, 2], [2], []])), ('listc', 'listA', 'listB'), 8), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('sum',), 4), (for ___ in range(0,len(___)): ||| (AbstractVariable(i__ [0, 1, 2, 0, 1, 2]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])), ('i', 'listc'), 4), (___+=___.pop() ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listc [[], [2], [2, 2], [2, 2, 2], [2, 2], [2], []])), ('sum', 'listc'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('sum',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=sum(___[___]*___[___]for ___ in range(len(___))) ||| (AbstractVariable(ans [6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('y', 'listA', 'i', 'listB', 'i', 'i', 'listA'), 4), (return ___ ||| (AbstractVariable(ans [6]),), ('y',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=[] ||| (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),), ('AB',), 4), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('C',), 4), (for ___ in range(0,len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('x', 'listA'), 4), (___.append(___[___]*___[___]) ||| (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('AB', 'listA', 'x', 'listB', 'x'), 8), (___+=___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('C', 'AB', 'x'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('C',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (assert len(___)==len(___) ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 4), (___=[] ||| (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),), ('listC',), 4), (for ___ in range(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('element', 'listA'), 4), (___.append(___[___]*___[___]) ||| (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('listC', 'listA', 'element', 'listB', 'element'), 8), (return sum(___) ||| (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),), ('listC',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('Sum',), 4), (for ___ in range(0,len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___=___[___]*___[___] ||| (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('dotProduct', 'listA', 'i', 'listB', 'i'), 8), (___=int(___)+___ ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2]), AbstractVariable(total [0, 2, 4, 6])), ('Sum', 'dotProduct', 'Sum'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('Sum',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (return sum(___*___ for(___,___)in zip(___,___)) ||| (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('a', 'b', 'a', 'b', 'listA', 'listB'), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('dot_product',), 4), (for ___ in range(0,len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('n', 'listA'), 5), (___+=___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('dot_product', 'listA', 'n', 'listB', 'n'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('dot_product',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4), (___=0 ||| (AbstractVariable(index [0]),), ('index',), 4), (for ___ in range(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('x', 'listA'), 4), (___+=___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('total', 'listA', 'x', 'listB', 'x'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4), (___=len(___) ||| (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]])), ('length', 'listA'), 4), (for ___ in xrange(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('number', 'listA'), 4), (___+=___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('total', 'listA', 'number', 'listB', 'number'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(a___2 [0, 1, 2, 3]),), ('n',), 4), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('dot_product',), 4), (while ___<len(___): ||| (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])), ('n', 'listA'), 4), (___=___[___]*___[___] ||| (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3])), ('number', 'listA', 'n', 'listB', 'n'), 8), (___=___+___ ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2])), ('dot_product', 'dot_product', 'number'), 8), (___=___+1 ||| (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3])), ('n', 'n'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('dot_product',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('prod',), 4), (___=0 ||| (AbstractVariable(a___2 [0, 1, 2, 3]),), ('index',), 4), (while ___<len(___): ||| (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])), ('index', 'listA'), 4), (___=___+___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3])), ('prod', 'prod', 'listA', 'index', 'listB', 'index'), 8), (___+=1 ||| (AbstractVariable(a___2 [0, 1, 2, 3]),), ('index',), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('prod',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('b',), 4), (for ___ in range(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___=___+___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('b', 'b', 'listA', 'i', 'listB', 'i'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('b',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('sum',), 4), (for ___ in xrange(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___=___[___]*___[___] ||| (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('product', 'listA', 'i', 'listB', 'i'), 8), (___+=___ ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2])), ('sum', 'product'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('sum',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=[] ||| (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),), ('result',), 4), (for ___ in range(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___.append(___[___]*___[___]) ||| (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('result', 'listA', 'i', 'listB', 'i'), 8), (return sum(___) ||| (AbstractVariable(AB [[], [2], [2, 2], [2, 2, 2]]),), ('result',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4), (for(___,___)in zip(___,___): ||| (AbstractVariable(a [1]), AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('x', 'y', 'listA', 'listB'), 4), (___=___*___ ||| (AbstractVariable(b [2]), AbstractVariable(a [1]), AbstractVariable(b [2])), ('dot', 'x', 'y'), 8), (___+=___ ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2])), ('total', 'dot'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('ans',), 4), (for ___ in range(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___=___[___]*___[___]+___ ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(total [0, 2, 4, 6])), ('ans', 'listA', 'i', 'listB', 'i', 'ans'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('ans',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(a___2 [0, 1, 2, 3]),), ('pos_in_list',), 4), (___=len(___) ||| (AbstractVariable(length [3]), AbstractVariable(listA [[1, 1, 1]])), ('list_length', 'listA'), 4), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('working_dot_product',), 4), (while ___<___: ||| (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(length [3])), ('pos_in_list', 'list_length'), 4), (___+=___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3])), ('working_dot_product', 'listA', 'pos_in_list', 'listB', 'pos_in_list'), 8), (___+=1 ||| (AbstractVariable(a___2 [0, 1, 2, 3]),), ('pos_in_list',), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('working_dot_product',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4), (for ___ in range(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___=___[___]*___[___] ||| (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('mult', 'listA', 'i', 'listB', 'i'), 8), (___+=___ ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2])), ('total', 'mult'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('total',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('sum',), 4), (___=0 ||| (AbstractVariable(a___2 [0, 1, 2, 3]),), ('i',), 4), (while ___<len(___): ||| (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___=___+___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(a___2 [0, 1, 2, 3])), ('sum', 'sum', 'listA', 'i', 'listB', 'i'), 8), (___=___+1 ||| (AbstractVariable(a___2 [0, 1, 2, 3]), AbstractVariable(a___2 [0, 1, 2, 3])), ('i', 'i'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('sum',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('ans',), 4), (for ___ in xrange(len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___[___]*___[___] ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('listA', 'i', 'listB', 'i'), 8), (___=___+___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('ans', 'ans', 'listA', 'i', 'listB', 'i'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('ans',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('ans',), 4), (for ___ in xrange(0,len(___)): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___=___[___]*___[___] ||| (AbstractVariable(b [2]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('mult', 'listA', 'i', 'listB', 'i'), 8), (___+=___ ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(b [2])), ('ans', 'mult'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('ans',), 4)]
[(def dotProduct(___,___): ||| (AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(listB [[2, 2, 2]])), ('listA', 'listB'), 0), (___=0 ||| (AbstractVariable(total [0, 2, 4, 6]),), ('counter',), 4), (for ___ in range(0,len(___),1): ||| (AbstractVariable(i [0, 1, 2]), AbstractVariable(listA [[1, 1, 1]])), ('i', 'listA'), 4), (___+=___[___]*___[___] ||| (AbstractVariable(total [0, 2, 4, 6]), AbstractVariable(listA [[1, 1, 1]]), AbstractVariable(i [0, 1, 2]), AbstractVariable(listB [[2, 2, 2]]), AbstractVariable(i [0, 1, 2])), ('counter', 'listA', 'i', 'listB', 'i'), 8), (return ___ ||| (AbstractVariable(total [0, 2, 4, 6]),), ('counter',), 4)]
skipped when extracting: []
skipped when rewriting: []
